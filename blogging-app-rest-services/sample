
>>>>>>>>>>>>>>>>>>>>>>> To kill Process <<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<

PS C:\Users\User> netstat -ano | findstr "8080"
  TCP    0.0.0.0:8080           0.0.0.0:0              LISTENING       11748
  TCP    [::]:8080              [::]:0                 LISTENING       11748
  
PS C:\Users\User> taskkill /F /PID 11748
SUCCESS: The process with PID 11748 has been terminated.
==============================================================================

static {
		users.add(new User(++id, "Arun", "arun@gmail.com", "Arun@password", LocalDate.now().minusYears(20)));
		users.add(new User(++id, "Chirag", "Chirag@gmail.com", "Chirag@password", LocalDate.now().minusYears(21)));
		users.add(new User(++id, "Manoj", "Manoj@gmail.com", "Manoj@password", LocalDate.now().minusYears(22)));
		users.add(new User(++id, "Chandan", "Chandan@gmail.com", "Chandan@password", LocalDate.now().minusYears(23)));

	}
	
	
	
	@GetMapping("/secured-endpoint")
//	public String getSecuredData() {
//		// Get the Authentication object from the SecurityContextHolder
////		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
//		org.springframework.security.core.Authentication principal = SecurityContextHolder.getContext().getAuthentication();
//
//		System.out.println(principal);
//		// Check if the user is authenticated
////		if (authentication.isAuthenticated()) {
////			// Access the authenticated user's username
////			String username = authentication.getName();
////
////			// Now you can use the username in your logic
////			return "Hello, " + username + "! This is a secured endpoint.";
////		} else {
////			return "Not authenticated";
////		}
//		return "getSecuredData";
//	}


Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String userName = authService.retriveEmailForId(id);
		
		if(authentication.isAuthenticated() && authentication.getName().equals(userName)) {
			return ResponseEntity.status(HttpStatus.FORBIDDEN).build();
		}